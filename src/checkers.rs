//! # –®–∞—à–∫–∏ - –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
//! 
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã "–®–∞—à–∫–∏".
//! –í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –∏–≥—Ä–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É –∏ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã.
//! 
//! ## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
//! ```rust
//! use rust_tic_tac_toe::checkers::Checkers;
//! 
//! let mut game = Checkers::new();
//! game.make_move(2, 1, 3, 2); // –•–æ–¥ –±–µ–ª–æ–π —à–∞—à–∫–æ–π
//! ```

// === –û–°–ù–û–í–ù–´–ï –¢–ò–ü–´ ===

/// –ò–≥—Ä–æ–∫ –≤ –∏–≥—Ä–µ "–®–∞—à–∫–∏"
#[derive(Clone, Copy, PartialEq, Debug, serde::Serialize, serde::Deserialize)]
pub enum CheckersPlayer {
    /// –ë–µ–ª—ã–µ —à–∞—à–∫–∏ (—Ö–æ–¥—è—Ç –ø–µ—Ä–≤—ã–º–∏)
    White,
    /// –ß–µ—Ä–Ω—ã–µ —à–∞—à–∫–∏ (—Ö–æ–¥—è—Ç –≤—Ç–æ—Ä—ã–º–∏)
    Black,
}

impl CheckersPlayer {
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    pub fn symbol(&self) -> &'static str {
        match self {
            CheckersPlayer::White => "‚ö™",
            CheckersPlayer::Black => "‚ö´",
        }
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª –¥–∞–º–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    pub fn king_symbol(&self) -> &'static str {
        match self {
            CheckersPlayer::White => "üëë",
            CheckersPlayer::Black => "üëë",
        }
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞—à–µ–∫
    pub fn direction(&self) -> i32 {
        match self {
            CheckersPlayer::White => 1,  // –í–Ω–∏–∑
            CheckersPlayer::Black => -1, // –í–≤–µ—Ä—Ö
        }
    }
}

/// –¢–∏–ø —à–∞—à–∫–∏
#[derive(Clone, Copy, PartialEq, Debug, serde::Serialize, serde::Deserialize)]
pub enum CheckerType {
    /// –û–±—ã—á–Ω–∞—è —à–∞—à–∫–∞
    Regular,
    /// –î–∞–º–∫–∞
    King,
}

/// –®–∞—à–∫–∞ –Ω–∞ –¥–æ—Å–∫–µ
#[derive(Clone, Copy, PartialEq, Debug, serde::Serialize, serde::Deserialize)]
pub struct Checker {
    /// –ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —à–∞—à–∫–∞
    pub player: CheckersPlayer,
    /// –¢–∏–ø —à–∞—à–∫–∏
    pub checker_type: CheckerType,
}

impl Checker {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –æ–±—ã—á–Ω—É—é —à–∞—à–∫—É
    pub fn new(player: CheckersPlayer) -> Self {
        Self {
            player,
            checker_type: CheckerType::Regular,
        }
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –¥–∞–º–∫—É
    pub fn new_king(player: CheckersPlayer) -> Self {
        Self {
            player,
            checker_type: CheckerType::King,
        }
    }
    
    /// –ü–æ–≤—ã—à–∞–µ—Ç —à–∞—à–∫—É –¥–æ –¥–∞–º–∫–∏
    pub fn promote_to_king(&mut self) {
        self.checker_type = CheckerType::King;
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à–∞—à–∫–∞ –¥–∞–º–∫–æ–π
    pub fn is_king(&self) -> bool {
        matches!(self.checker_type, CheckerType::King)
    }
}

/// –•–æ–¥ –≤ –∏–≥—Ä–µ
#[derive(Clone, Debug, serde::Serialize, serde::Deserialize)]
pub struct CheckersMove {
    /// –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (—Å—Ç—Ä–æ–∫–∞, —Å—Ç–æ–ª–±–µ—Ü)
    pub from: (usize, usize),
    /// –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (—Å—Ç—Ä–æ–∫–∞, —Å—Ç–æ–ª–±–µ—Ü)
    pub to: (usize, usize),
    /// –ü–æ–∑–∏—Ü–∏–∏ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö —à–∞—à–µ–∫
    pub captures: Vec<(usize, usize)>,
}

impl CheckersMove {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ö–æ–¥
    pub fn new(from_row: usize, from_col: usize, to_row: usize, to_col: usize) -> Self {
        Self {
            from: (from_row, from_col),
            to: (to_row, to_col),
            captures: Vec::new(),
        }
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç —Ö–æ–¥ —Å –∑–∞—Ö–≤–∞—Ç–æ–º
    pub fn with_captures(from: (usize, usize), to: (usize, usize), captures: Vec<(usize, usize)>) -> Self {
        Self { from, to, captures }
    }
}

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–æ–¥–∞
#[derive(Debug, Clone)]
pub struct MoveLog {
    /// –ù–æ–º–µ—Ä —Ö–æ–¥–∞
    pub move_number: usize,
    /// –ò–≥—Ä–æ–∫, —Å–¥–µ–ª–∞–≤—à–∏–π —Ö–æ–¥
    pub player: CheckersPlayer,
    /// –û—Ç–∫—É–¥–∞
    pub from: (usize, usize),
    /// –ö—É–¥–∞
    pub to: (usize, usize),
    /// –¢–∏–ø —Ö–æ–¥–∞
    pub move_type: MoveType,
    /// –ó–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ —à–∞—à–∫–∏
    pub captured: Vec<(usize, usize)>,
    /// –ü–æ–∑–∏—Ü–∏—è –¥–æ—Å–∫–∏ –ø–æ—Å–ª–µ —Ö–æ–¥–∞
    pub board_after: String,
}

/// –¢–∏–ø —Ö–æ–¥–∞
#[derive(Debug, Clone)]
pub enum MoveType {
    /// –û–±—ã—á–Ω—ã–π —Ö–æ–¥
    Regular,
    /// –í–∑—è—Ç–∏–µ
    Capture,
    /// –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–∞–º–∫—É
    Promotion,
    /// –í–∑—è—Ç–∏–µ —Å –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ–º
    CaptureWithPromotion,
}

// === –û–°–ù–û–í–ù–ê–Ø –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ===

/// –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–≥—Ä—ã –≤ —à–∞—à–∫–∏
#[derive(Clone, Debug)]
pub struct Checkers {
    /// –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 8x8
    board: [[Option<Checker>; 8]; 8],
    /// –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
    pub current_player: CheckersPlayer,
    /// –§–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    game_over: bool,
    /// –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–¥–µ–ª–∞–Ω–Ω—ã–π —Ö–æ–¥
    last_move: Option<CheckersMove>,
    /// –ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤
    move_history: Vec<MoveLog>,
}

impl Checkers {
    // === –ö–û–ù–°–¢–†–£–ö–¢–û–†–´ –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É
    /// 
    /// –†–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç —à–∞—à–∫–∏ –≤ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:
    /// - –ë–µ–ª—ã–µ —à–∞—à–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–∏—Ö 3 —Ä—è–¥–∞—Ö
    /// - –ß–µ—Ä–Ω—ã–µ —à–∞—à–∫–∏ –≤ –Ω–∏–∂–Ω–∏—Ö 3 —Ä—è–¥–∞—Ö
    /// - –¢–æ–ª—å–∫–æ –Ω–∞ —á–µ—Ä–Ω—ã—Ö –∫–ª–µ—Ç–∫–∞—Ö
    pub fn new() -> Self {
        let mut board = [[None; 8]; 8];
        
        // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –±–µ–ª—ã–µ —à–∞—à–∫–∏ (–≤–µ—Ä—Ö–Ω–∏–µ 3 —Ä—è–¥–∞)
        for row in 0..3 {
            for col in 0..8 {
                if Self::is_black_cell(row, col) {
                    board[row][col] = Some(Checker::new(CheckersPlayer::White));
                }
            }
        }
        
        // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —á–µ—Ä–Ω—ã–µ —à–∞—à–∫–∏ (–Ω–∏–∂–Ω–∏–µ 3 —Ä—è–¥–∞)
        for row in 5..8 {
            for col in 0..8 {
                if Self::is_black_cell(row, col) {
                    board[row][col] = Some(Checker::new(CheckersPlayer::Black));
                }
            }
        }
        
        Self {
            board,
            current_player: CheckersPlayer::White,
            game_over: false,
            last_move: None,
            move_history: Vec::new(),
        }
    }
    
    /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    pub fn reset(&mut self) {
        *self = Self::new();
        println!("–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ");
    }
    
    // === –ì–ï–¢–¢–ï–†–´ –ò –°–í–û–ô–°–¢–í–ê ===
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    pub fn current_player_symbol(&self) -> &'static str {
        self.current_player.symbol()
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏
    pub fn get_board(&self) -> [[Option<Checker>; 8]; 8] {
        self.board
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —à–∞—à–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    pub fn get_checker(&self, row: usize, col: usize) -> Option<Checker> {
        if Self::is_valid_position(row, col) {
            self.board[row][col]
        } else {
            None
        }
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–¥–µ–ª–∞–Ω–Ω—ã–π —Ö–æ–¥
    pub fn get_last_move(&self) -> Option<CheckersMove> {
        self.last_move.clone()
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ö–æ–¥–æ–≤
    pub fn get_move_history(&self) -> &[MoveLog] {
        &self.move_history
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    pub fn get_last_move_log(&self) -> Option<&MoveLog> {
        self.move_history.last()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
    pub fn is_game_over(&self) -> bool {
        self.game_over
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–≥—Ä—ã, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    pub fn get_winner(&self) -> Option<CheckersPlayer> {
        if !self.game_over {
            return None;
        }
        
        let mut white_count = 0;
        let mut black_count = 0;
        
        for row in &self.board {
            for cell in row {
                if let Some(checker) = cell {
                    match checker.player {
                        CheckersPlayer::White => white_count += 1,
                        CheckersPlayer::Black => black_count += 1,
                    }
                }
            }
        }
        
        if white_count == 0 {
            Some(CheckersPlayer::Black)
        } else if black_count == 0 {
            Some(CheckersPlayer::White)
        } else {
            None
        }
    }
    
    // === –£–¢–ò–õ–ò–¢–´ ===
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–µ—Ç–∫–∞ —á–µ—Ä–Ω–æ–π (–∏–≥—Ä–æ–≤–æ–π)
    pub fn is_black_cell(row: usize, col: usize) -> bool {
        (row + col) % 2 == 1
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å–∫–∏
    pub fn is_valid_position(row: usize, col: usize) -> bool {
        row < 8 && col < 8
    }
    
    // === –û–°–ù–û–í–ù–ê–Ø –ò–ì–†–û–í–ê–Ø –ú–ï–•–ê–ù–ò–ö–ê ===
    
    /// –î–µ–ª–∞–µ—Ç —Ö–æ–¥
    /// 
    /// ## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    /// - `from_row`, `from_col`: –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    /// - `to_row`, `to_col`: –∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    /// 
    /// ## –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    /// - `true` –µ—Å–ª–∏ —Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω
    /// - `false` –µ—Å–ª–∏ —Ö–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    pub fn make_move(&mut self, from_row: usize, from_col: usize, to_row: usize, to_col: usize) -> bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π
        if !Self::is_valid_position(from_row, from_col) || !Self::is_valid_position(to_row, to_col) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–ª–µ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞—à–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        let checker = match self.board[from_row][from_col] {
            Some(c) if c.player == self.current_player => c,
            _ => return false,
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞ –∏ —á–µ—Ä–Ω–∞—è
        if self.board[to_row][to_col].is_some() || !Self::is_black_cell(to_row, to_col) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è
        let has_captures = self.has_forced_captures();
        let is_capture_move = self.is_capture_move(from_row, from_col, to_row, to_col);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è, —Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∑—è—Ç–∏—è
        if has_captures && !is_capture_move {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ö–æ–¥–∞
        if !self.is_valid_move(from_row, from_col, to_row, to_col, &checker) {
            return false;
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥
        self.board[to_row][to_col] = Some(checker);
        self.board[from_row][from_col] = None;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ö–æ–¥–∞ –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        let mut move_type = if is_capture_move { MoveType::Capture } else { MoveType::Regular };
        let mut captured = Vec::new();
        
        // –ï—Å–ª–∏ —ç—Ç–æ –≤–∑—è—Ç–∏–µ, —É–¥–∞–ª—è–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—É—é —à–∞—à–∫—É
        if is_capture_move {
            let captured_row = (from_row + to_row) / 2;
            let captured_col = (from_col + to_col) / 2;
            self.board[captured_row][captured_col] = None;
            captured.push((captured_row, captured_col));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∑—è—Ç–∏–∏
            self.last_move = Some(CheckersMove::with_captures(
                (from_row, from_col),
                (to_row, to_col),
                captured.clone()
            ));
        } else {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
            self.last_move = Some(CheckersMove::new(from_row, from_col, to_row, to_col));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—ã—Å–∏—Ç—å —à–∞—à–∫—É –¥–æ –¥–∞–º–∫–∏
        let should_promote = self.should_promote_to_king(to_row, to_col, &checker);
        if should_promote {
            if let Some(checker) = &mut self.board[to_row][to_col] {
                checker.promote_to_king();
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Ö–æ–¥–∞
                move_type = if is_capture_move { MoveType::CaptureWithPromotion } else { MoveType::Promotion };
            }
        }
        
        // –õ–æ–≥–≥–∏—Ä—É–µ–º —Ö–æ–¥
        self.log_move((from_row, from_col), (to_row, to_col), move_type, captured);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
        if self.check_winner() {
            self.game_over = true;
        } else {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑—è—Ç–∏–µ
            if is_capture_move {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑—è—Ç–∏–µ —Ç–æ–π –∂–µ —à–∞—à–∫–æ–π
                let possible_captures = self.get_possible_captures(to_row, to_col);
                
                if !possible_captures.is_empty() {
                    // –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ - –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑—è—Ç–∏–µ
                    return true;
                }
            }
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
            self.current_player = match self.current_player {
                CheckersPlayer::White => CheckersPlayer::Black,
                CheckersPlayer::Black => CheckersPlayer::White,
            };
        }
        
        true
    }
    
    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –•–û–î–û–í ===
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ö–æ–¥–∞
    fn is_valid_move(&self, from_row: usize, from_col: usize, to_row: usize, to_col: usize, checker: &Checker) -> bool {
        let row_diff = to_row as i32 - from_row as i32;
        let col_diff = to_col as i32 - from_col as i32;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ–¥ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        if row_diff.abs() != col_diff.abs() {
            return false;
        }
        
        let is_capture = row_diff.abs() == 2;
        
        match checker.checker_type {
            CheckerType::Regular => {
                if is_capture {
                    // –í–∑—è—Ç–∏–µ: —Ö–æ–¥ –Ω–∞ 2 –∫–ª–µ—Ç–∫–∏ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –¢–û–õ–¨–ö–û –í–ü–ï–†–ï–î
                    let direction = checker.player.direction();
                    if row_diff != direction * 2 || col_diff.abs() != 2 {
                        return false;
                    }
                } else {
                    // –û–±—ã—á–Ω—ã–π —Ö–æ–¥: –Ω–∞ 1 –∫–ª–µ—Ç–∫—É –≤–ø–µ—Ä–µ–¥ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
                    let direction = checker.player.direction();
                    if row_diff != direction || col_diff.abs() != 1 {
                        return false;
                    }
                }
            }
            CheckerType::King => {
                // –î–∞–º–∫–∏ –º–æ–≥—É—Ç —Ö–æ–¥–∏—Ç—å –Ω–∞ –ª—é–±–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                if row_diff.abs() < 1 || col_diff.abs() < 1 {
                    return false;
                }
            }
        }
        
        if is_capture {
            // –î–ª—è –≤–∑—è—Ç–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏ –µ—Å—Ç—å —à–∞—à–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            let mid_row = (from_row + to_row) / 2;
            let mid_col = (from_col + to_col) / 2;
            
            if let Some(mid_checker) = self.board[mid_row][mid_col] {
                if mid_checker.player == checker.player {
                    return false; // –ù–µ–ª—å–∑—è –±—Ä–∞—Ç—å —Å–≤–æ—é —à–∞—à–∫—É
                }
            } else {
                return false; // –ú–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —à–∞—à–∫–∞
            }
        } else {
            // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å —Å–≤–æ–±–æ–¥–µ–Ω
            if !self.is_path_clear(from_row, from_col, to_row, to_col) {
                return false;
            }
        }
        
        true
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–∑–∏—Ü–∏—è–º–∏
    fn is_path_clear(&self, from_row: usize, from_col: usize, to_row: usize, to_col: usize) -> bool {
        let row_step = if to_row > from_row { 1 } else { -1 };
        let col_step = if to_col > from_col { 1 } else { -1 };
        
        let mut current_row = from_row as i32 + row_step;
        let mut current_col = from_col as i32 + col_step;
        
        while current_row != to_row as i32 && current_col != to_col as i32 {
            if self.board[current_row as usize][current_col as usize].is_some() {
                return false;
            }
            current_row += row_step;
            current_col += col_step;
        }
        
        true
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—ã—Å–∏—Ç—å —à–∞—à–∫—É –¥–æ –¥–∞–º–∫–∏
    fn should_promote_to_king(&self, row: usize, _col: usize, checker: &Checker) -> bool {
        if checker.is_king() {
            return false;
        }
        
        match checker.player {
            CheckersPlayer::White => row == 7, // –ë–µ–ª—ã–µ —à–∞—à–∫–∏ –¥–æ—Å—Ç–∏–≥–∞—é—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è
            CheckersPlayer::Black => row == 0, // –ß–µ—Ä–Ω—ã–µ —à–∞—à–∫–∏ –¥–æ—Å—Ç–∏–≥–∞—é—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
    fn check_winner(&self) -> bool {
        let mut white_count = 0;
        let mut black_count = 0;
        
        for row in &self.board {
            for cell in row {
                if let Some(checker) = cell {
                    match checker.player {
                        CheckersPlayer::White => white_count += 1,
                        CheckersPlayer::Black => black_count += 1,
                    }
                }
            }
        }
        
        white_count == 0 || black_count == 0
    }
    
    // === –ü–û–ò–°–ö –í–û–ó–ú–û–ñ–ù–´–• –•–û–î–û–í ===
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —à–∞—à–∫–∏
    pub fn get_possible_moves(&self, row: usize, col: usize) -> Vec<CheckersMove> {
        let mut moves = Vec::new();
        
        if let Some(checker) = self.board[row][col] {
            if checker.player != self.current_player {
                return moves;
            }
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è
            let captures = self.get_possible_captures(row, col);
            if !captures.is_empty() {
                return captures;
            }
            
            // –ï—Å–ª–∏ –≤–∑—è—Ç–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ö–æ–¥—ã
            let directions = match checker.checker_type {
                CheckerType::Regular => vec![checker.player.direction()],
                CheckerType::King => vec![-1, 1],
            };
            
            for &row_dir in &directions {
                for &col_dir in &[-1, 1] {
                    let mut new_row = row as i32 + row_dir;
                    let mut new_col = col as i32 + col_dir;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω–∞
                    if !Self::is_valid_position(new_row as usize, new_col as usize) {
                        continue;
                    }
                    
                    while Self::is_valid_position(new_row as usize, new_col as usize) {
                        if !Self::is_black_cell(new_row as usize, new_col as usize) {
                            break;
                        }
                        
                        if self.board[new_row as usize][new_col as usize].is_none() {
                            moves.push(CheckersMove::new(row, col, new_row as usize, new_col as usize));
                        } else {
                            break;
                        }
                        
                        // –û–±—ã—á–Ω—ã–µ —à–∞—à–∫–∏ –º–æ–≥—É—Ç —Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∫–ª–µ—Ç–∫—É
                        if matches!(checker.checker_type, CheckerType::Regular) {
                            break;
                        }
                        
                        new_row += row_dir;
                        new_col += col_dir;
                    }
                }
            }
        }
        
        moves
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∑—è—Ç–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —à–∞—à–∫–∏
    pub fn get_possible_captures(&self, row: usize, col: usize) -> Vec<CheckersMove> {
        let mut captures = Vec::new();
        
        if let Some(checker) = self.board[row][col] {
            if checker.player != self.current_player {
                return captures;
            }
            
            // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∑—è—Ç–∏—è, –≤–∫–ª—é—á–∞—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ
            self.find_all_captures(row, col, &checker, &mut captures, &mut Vec::new());
        }
        
        captures
    }
    
    /// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∑—è—Ç–∏—è –¥–ª—è —à–∞—à–∫–∏
    fn find_all_captures(&self, row: usize, col: usize, checker: &Checker, 
                         captures: &mut Vec<CheckersMove>, path: &mut Vec<(usize, usize)>) {
        let directions = match checker.checker_type {
            CheckerType::Regular => vec![checker.player.direction()], // –¢–æ–ª—å–∫–æ –≤–ø–µ—Ä–µ–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞—à–µ–∫
            CheckerType::King => vec![-1, 1], // –í –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–ª—è –¥–∞–º–æ–∫
        };
        
        for &row_dir in &directions {
            for &col_dir in &[-1, 1] {
                // –ò—â–µ–º —à–∞—à–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è –≤–∑—è—Ç–∏—è
                let jump_row = row as i32 + row_dir;
                let jump_col = col as i32 + col_dir;
                
                if !Self::is_valid_position(jump_row as usize, jump_col as usize) {
                    continue;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞—à–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è –≤–∑—è—Ç–∏—è
                if let Some(jump_checker) = self.board[jump_row as usize][jump_col as usize] {
                    if jump_checker.player != checker.player {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–∞ —à–∞—à–∫–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –≤–∑—è—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º –ø—É—Ç–∏
                        if !path.contains(&(jump_row as usize, jump_col as usize)) {
                            // –ò—â–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
                            let mut land_positions = Vec::new();
                            
                            if checker.is_king() {
                                // –î–∞–º–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–∑–µ–º–ª–∏—Ç—å—Å—è –Ω–∞ –ª—é–±–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –ø–æ–ª–µ –∑–∞ —à–∞—à–∫–æ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                                let mut land_row = jump_row + row_dir;
                                let mut land_col = jump_col + col_dir;
                                
                                while Self::is_valid_position(land_row as usize, land_col as usize) &&
                                       Self::is_black_cell(land_row as usize, land_col as usize) {
                                    
                                    if self.board[land_row as usize][land_col as usize].is_none() {
                                        land_positions.push((land_row as usize, land_col as usize));
                                    } else {
                                        break; // –í—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
                                    }
                                    
                                    land_row += row_dir;
                                    land_col += col_dir;
                                }
                            } else {
                                // –û–±—ã—á–Ω—ã–µ —à–∞—à–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–∑–µ–º–ª–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∫–ª–µ—Ç–∫—É
                                let land_row = jump_row + row_dir;
                                let land_col = jump_col + col_dir;
                                
                                if Self::is_valid_position(land_row as usize, land_col as usize) &&
                                   Self::is_black_cell(land_row as usize, land_col as usize) &&
                                   self.board[land_row as usize][land_col as usize].is_none() {
                                    
                                    land_positions.push((land_row as usize, land_col as usize));
                                }
                            }
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
                            for land_pos in land_positions {
                                let mut new_path = path.clone();
                                new_path.push((jump_row as usize, jump_col as usize));
                                
                                // –°–æ–∑–¥–∞–µ–º —Ö–æ–¥ —Å –∑–∞—Ö–≤–∞—Ç–æ–º
                                let capture_move = CheckersMove::with_captures(
                                    (row, col),
                                    land_pos,
                                    new_path.clone()
                                );
                                
                                captures.push(capture_move);
                                
                                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è —Å —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                                if checker.is_king() {
                                    // –î–ª—è –¥–∞–º–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∑—è—Ç–∏—è
                                    self.find_all_captures(land_pos.0, land_pos.1, checker, 
                                                         captures, &mut new_path);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    pub fn has_forced_captures(&self) -> bool {
        for row in 0..8 {
            for col in 0..8 {
                if let Some(checker) = self.board[row][col] {
                    if checker.player == self.current_player {
                        if !self.get_possible_captures(row, col).is_empty() {
                            return true;
                        }
                    }
                }
            }
        }
        false
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–µ–µ –≤–∑—è—Ç–∏–µ (—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö —à–∞—à–µ–∫)
    pub fn find_best_capture(&self) -> Option<CheckersMove> {
        let mut best_capture: Option<CheckersMove> = None;
        let mut max_captures = 0;
        
        for row in 0..8 {
            for col in 0..8 {
                if let Some(checker) = self.board[row][col] {
                    if checker.player == self.current_player {
                        let captures = self.get_possible_captures(row, col);
                        for capture in captures {
                            if capture.captures.len() > max_captures {
                                max_captures = capture.captures.len();
                                best_capture = Some(capture);
                            }
                        }
                    }
                }
            }
        }
        
        best_capture
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    pub fn get_all_possible_moves(&self) -> Vec<CheckersMove> {
        let mut all_moves = Vec::new();
        let has_captures = self.has_forced_captures();
        
        for row in 0..8 {
            for col in 0..8 {
                if let Some(checker) = self.board[row][col] {
                    if checker.player == self.current_player {
                        if has_captures {
                            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∑—è—Ç–∏—è
                            all_moves.extend(self.get_possible_captures(row, col));
                        } else {
                            // –ï—Å–ª–∏ –≤–∑—è—Ç–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ö–æ–¥—ã
                            all_moves.extend(self.get_possible_moves(row, col));
                        }
                    }
                }
            }
        }
        
        all_moves
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –≤–∑—è—Ç–∏–µ–º
    pub fn is_capture_move(&self, from_row: usize, from_col: usize, to_row: usize, to_col: usize) -> bool {
        let row_diff = to_row as i32 - from_row as i32;
        let col_diff = to_col as i32 - from_col as i32;
        
        // –í–∑—è—Ç–∏–µ - —ç—Ç–æ —Ö–æ–¥ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 2 –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        row_diff.abs() == 2 && col_diff.abs() == 2
    }
    
    // === –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ===
    
    /// –õ–æ–≥–≥–∏—Ä—É–µ—Ç —Ö–æ–¥
    fn log_move(&mut self, from: (usize, usize), to: (usize, usize), 
                move_type: MoveType, captured: Vec<(usize, usize)>) {
        let move_number = self.move_history.len() + 1;
        let player = self.current_player;
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏
        let board_after = self.board_to_string();
        
        let move_log = MoveLog {
            move_number,
            player,
            from,
            to,
            move_type: move_type.clone(),
            captured: captured.clone(),
            board_after,
        };
        
        self.move_history.push(move_log);
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ–¥–µ –≤ –∫–æ–Ω—Å–æ–ª—å
        println!("=== –•–û–î {} ===", move_number);
        println!("–ò–≥—Ä–æ–∫: {}", match player { CheckersPlayer::White => "–ë–µ–ª—ã–µ", CheckersPlayer::Black => "–ß–µ—Ä–Ω—ã–µ" });
        println!("–û—Ç: ({}, {}) -> –ö: ({}, {})", from.0, from.1, to.0, to.1);
        println!("–¢–∏–ø: {}", match &move_type {
            MoveType::Regular => "–û–±—ã—á–Ω—ã–π —Ö–æ–¥",
            MoveType::Capture => "–í–∑—è—Ç–∏–µ",
            MoveType::Promotion => "–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–∞–º–∫—É",
            MoveType::CaptureWithPromotion => "–í–∑—è—Ç–∏–µ —Å –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ–º",
        });
        if !captured.is_empty() {
            println!("–ó–∞—Ö–≤–∞—á–µ–Ω–æ: {:?}", captured);
        }
        println!("–î–æ—Å–∫–∞ –ø–æ—Å–ª–µ —Ö–æ–¥–∞:");
        self.display_board();
        println!("==================");
    }
    
    /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–æ—Å–∫—É –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    fn board_to_string(&self) -> String {
        let mut result = String::new();
        for row in &self.board {
            for cell in row {
                match cell {
                    Some(checker) => {
                        if checker.is_king() {
                            result.push(checker.player.king_symbol().chars().next().unwrap_or('K'));
                        } else {
                            result.push(checker.player.symbol().chars().next().unwrap_or('O'));
                        }
                    }
                    None => result.push(' '),
                }
            }
            result.push('\n');
        }
        result
    }
    
    // === –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï ===
    
    /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –≤ –∫–æ–Ω—Å–æ–ª–∏
    pub fn display_board(&self) {
        println!();
        println!("   A B C D E F G H");
        println!("  ‚îå‚îÄ‚î¨‚îÄ‚î¨‚îÄ‚î¨‚îÄ‚î¨‚îÄ‚î¨‚îÄ‚î¨‚îÄ‚î¨‚îÄ‚îê");
        
        for (row_idx, row) in self.board.iter().enumerate() {
            print!("{} ‚îÇ", 8 - row_idx);
            
            for (col_idx, cell) in row.iter().enumerate() {
                if Self::is_black_cell(row_idx, col_idx) {
                    match cell {
                        Some(checker) => {
                            if checker.is_king() {
                                print!("{}", checker.player.king_symbol());
                            } else {
                                print!("{}", checker.player.symbol());
                            }
                        }
                        None => print!(" "),
                    }
                } else {
                    print!("‚ñà");
                }
                print!("‚îÇ");
            }
            println!();
            
            if row_idx < 7 {
                println!("  ‚îú‚îÄ‚îº‚îÄ‚îº‚îÄ‚îº‚îÄ‚îº‚îÄ‚îº‚îÄ‚îº‚îÄ‚îº‚îÄ‚î§");
            }
        }
        
        println!("  ‚îî‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚îò");
        println!("   A B C D E F G H");
        println!();
    }
    
    /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ö–æ–¥–æ–≤
    pub fn display_move_history(&self) {
        println!("\n=== –ò–°–¢–û–†–ò–Ø –•–û–î–û–í ===");
        if self.move_history.is_empty() {
            println!("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ - –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å");
        } else {
            for move_log in &self.move_history {
                println!("–•–æ–¥ {}: {} –æ—Ç ({},{}) –∫ ({},{}) - {}",
                    move_log.move_number,
                    match move_log.player { CheckersPlayer::White => "–ë–µ–ª—ã–µ", CheckersPlayer::Black => "–ß–µ—Ä–Ω—ã–µ" },
                    move_log.from.0, move_log.from.1,
                    move_log.to.0, move_log.to.1,
                    match move_log.move_type {
                        MoveType::Regular => "–û–±—ã—á–Ω—ã–π —Ö–æ–¥",
                        MoveType::Capture => "–í–∑—è—Ç–∏–µ",
                        MoveType::Promotion => "–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–∞–º–∫—É",
                        MoveType::CaptureWithPromotion => "–í–∑—è—Ç–∏–µ —Å –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ–º",
                    }
                );
                if !move_log.captured.is_empty() {
                    println!("  –ó–∞—Ö–≤–∞—á–µ–Ω–æ: {:?}", move_log.captured);
                }
            }
        }
        println!("=====================\n");
    }
    
    /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    pub fn display_game_state(&self) {
        println!("\n=== –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´ ===");
        println!("–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫: {}", match self.current_player {
            CheckersPlayer::White => "–ë–µ–ª—ã–µ",
            CheckersPlayer::Black => "–ß–µ—Ä–Ω—ã–µ"
        });
        println!("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞: {}", if self.game_over { "–î–∞" } else { "–ù–µ—Ç" });
        
        if let Some(winner) = self.get_winner() {
            println!("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {}", match winner {
                CheckersPlayer::White => "–ë–µ–ª—ã–µ",
                CheckersPlayer::Black => "–ß–µ—Ä–Ω—ã–µ"
            });
        }
        
        if let Some(last_move) = &self.last_move {
            println!("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥: –æ—Ç ({},{}) –∫ ({},{})", 
                last_move.from.0, last_move.from.1,
                last_move.to.0, last_move.to.1);
            if !last_move.captures.is_empty() {
                println!("–ó–∞—Ö–≤–∞—á–µ–Ω–æ: {:?}", last_move.captures);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è
        if self.has_forced_captures() {
            println!("‚ö†Ô∏è  –ï—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è!");
        }
        
        println!("=====================\n");
    }
    
    // === –ú–ï–¢–û–î–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===
    
    #[cfg(test)]
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —à–∞—à–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    pub fn set_checker(&mut self, row: usize, col: usize, checker: Option<Checker>) {
        if Self::is_valid_position(row, col) {
            self.board[row][col] = checker;
        }
    }
    
    #[cfg(test)]
    /// –ü–æ–ª—É—á–∞–µ—Ç —à–∞—à–∫—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    pub fn get_checker_at(&self, row: usize, col: usize) -> Option<Checker> {
        if Self::is_valid_position(row, col) {
            self.board[row][col]
        } else {
            None
        }
    }
    
    #[cfg(test)]
    /// –û—á–∏—â–∞–µ—Ç –≤—Å—é –¥–æ—Å–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    pub fn clear_board(&mut self) {
        for row in 0..8 {
            for col in 0..8 {
                self.board[row][col] = None;
            }
        }
    }
    
    #[cfg(test)]
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ —Ö–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    pub fn move_history_len(&self) -> usize {
        self.move_history.len()
    }
    
    #[cfg(test)]
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ö–æ–¥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    pub fn get_move_at(&self, index: usize) -> Option<&MoveLog> {
        self.move_history.get(index)
    }
}
