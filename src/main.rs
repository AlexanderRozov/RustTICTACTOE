//! # Крестики-нолики - Главное приложение
//! 
//! Это главный модуль приложения, который предоставляет два режима игры:
//! - Консольная версия (по умолчанию)
//! - Графическая версия (GUI) с использованием egui
//! 
//! ## Запуск
//! 
//! ### Консольная версия
//! ```bash
//! cargo run
//! ```
//! 
//! ### Графическая версия
//! ```bash
//! cargo run -- --gui
//! ```
//! 
//! ## Управление
//! 
//! **Консольная версия:**
//! - Числа 1-9 для выбора позиции
//! - 'q' или 'quit' для выхода
//! - 'y' для новой игры, 'n' для завершения
//! 
//! **Графическая версия:**
//! - Клики мышью по клеткам
//! - Кнопка "Новая игра" для перезапуска
//! - Кнопка "Выход" для закрытия

use std::io::{self, Write};
use std::env;
use rust_tic_tac_toe::TicTacToe;

/// Модуль графического интерфейса
mod gui;
/// Модуль графического интерфейса для шашек
mod checkers_gui;

/// Главная функция приложения
/// 
/// Анализирует аргументы командной строки и запускает соответствующий режим:
/// - Без аргументов: консольная версия
/// - С аргументом `--gui`: графическая версия крестиков-ноликов
/// - С аргументом `--checkers`: графическая версия шашек
fn main() {
    let args: Vec<String> = env::args().collect();
    
    if args.len() > 1 {
        match args[1].as_str() {
            "--gui" => {
                // Запуск графической версии крестиков-ноликов
                println!("Запуск графической версии крестиков-ноликов...");
                let mut gui = gui::TicTacToeGUI::new();
                if let Err(e) = gui.run() {
                    eprintln!("Ошибка запуска GUI: {}", e);
                    eprintln!("Попробуйте запустить консольную версию: cargo run");
                }
            }
            "--checkers" => {
                // Запуск графической версии шашек
                println!("Запуск графической версии шашек...");
                let mut gui = checkers_gui::CheckersGUI::new();
                if let Err(e) = gui.run() {
                    eprintln!("Ошибка запуска GUI шашек: {}", e);
                    eprintln!("Попробуйте запустить консольную версию: cargo run");
                }
            }
            _ => {
                println!("Неизвестный аргумент: {}", args[1]);
                println!("Доступные опции:");
                println!("  --gui       - запуск крестиков-ноликов");
                println!("  --checkers  - запуск шашек");
                println!("  (без аргументов) - консольная версия");
            }
        }
    } else {
        // Запуск консольной версии
        run_console_game();
    }
}

/// Запускает консольную версию игры
/// 
/// Создает игровой цикл с текстовым интерфейсом:
/// - Отображает игровое поле
/// - Принимает ввод от пользователя
/// - Показывает статус игры
/// - Предлагает начать новую игру
fn run_console_game() {
    let mut game = TicTacToe::new();
    
    // Приветствие и инструкции
    println!("Добро пожаловать в Крестики-нолики!");
    println!("Используйте числа 1-9 для хода:");
    println!("1 | 2 | 3");
    println!("---------");
    println!("4 | 5 | 6");
    println!("---------");
    println!("7 | 8 | 9");
    println!();
    println!("Для запуска графической версии крестиков-ноликов используйте: cargo run -- --gui");
    println!("Для запуска графической версии шашек используйте: cargo run -- --checkers");
    println!();
    
    // Главный игровой цикл
    while !game.is_game_over() {
        // Отображаем текущее состояние игры
        game.display_board();
        println!("Ход игрока: {}", game.current_player_symbol());
        
        // Получаем ход от пользователя
        let position = get_user_input();
        if let Some(pos) = position {
            // Проверяем корректность хода
            if !game.make_move(pos) {
                println!("Неверный ход! Попробуйте снова.");
                continue;
            }
        } else {
            println!("Неверный ввод! Введите число от 1 до 9.");
            continue;
        }
        
        // Проверяем, закончилась ли игра
        if game.is_game_over() {
            // Показываем финальное состояние
            game.display_board();
            
            // Отображаем результат
            match game.get_winner() {
                Some(player) => println!("Победитель: {}!", player.symbol()),
                None => println!("Ничья!"),
            }
            
            // Предлагаем начать новую игру
            print!("Хотите сыграть еще раз? (y/n): ");
            io::stdout().flush().unwrap();
            
            let mut input = String::new();
            io::stdin().read_line(&mut input).unwrap();
            
            if input.trim().to_lowercase() == "y" {
                // Сбрасываем игру и продолжаем
                game.reset();
                println!("\nНовая игра!");
                println!();
            } else {
                // Завершаем игру
                println!("Спасибо за игру!");
                break;
            }
        }
    }
}

/// Получает ввод от пользователя
/// 
/// Запрашивает позицию для хода и обрабатывает специальные команды.
/// 
/// ## Возвращает
/// - `Some(position)` - позиция для хода (0-8)
/// - `None` - некорректный ввод
/// 
/// ## Специальные команды
/// - `q` или `quit` - выход из игры
/// 
/// ## Примеры
/// - Ввод "5" → возвращает `Some(4)` (центр поля)
/// - Ввод "1" → возвращает `Some(0)` (левый верхний угол)
/// - Ввод "q" → завершает программу
fn get_user_input() -> Option<usize> {
    print!("Введите позицию (1-9): ");
    io::stdout().flush().unwrap();
    
    let mut input = String::new();
    io::stdin().read_line(&mut input).unwrap();
    
    let trimmed = input.trim();
    
    // Проверяем команды выхода
    if trimmed == "q" || trimmed == "quit" {
        println!("Выход из игры...");
        std::process::exit(0);
    }
    
    // Парсим число и конвертируем в индекс массива (1-9 → 0-8)
    trimmed.parse::<usize>().ok().map(|n| n - 1)
}
